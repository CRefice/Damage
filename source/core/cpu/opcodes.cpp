#include <fstream>
#include <iomanip>

#include "cpu.hpp"

std::ofstream file{ "D:\\Log.log" };

#define LOG(a, width) std::hex << std::setw((width)) << std::setfill('0') << int(a)
bool enable = false;

namespace core
{
void CPU::instruction() {
	//if (r[PC] >= 0x100) enable = true;
	//if (enable) {
	//	file << "PC: " << LOG(r[PC], 4) << "\tInstruction: " << LOG(read(r[PC]), 2) << '\n';

	//	file << "AF: " << LOG(r[AF], 4) << "\tBC: " << LOG(r[BC], 4);
	//	file << "\tDE: " << LOG(r[DE], 4) << "\tHL: " << LOG(r[HL], 4) << '\n';

	//	uint16 stackval = (read(r[SP] + 1) << 8) | (read(r[SP]));
	//	file << "SP: " << LOG(r[SP], 4) << "\tLast value: " << LOG(stackval, 4) << '\n';
	//	file << "TIMA: " << LOG(status.tima, 2) << "\tDIV: " << LOG(status.div, 2) << '\n' << std::endl;
	//}
	switch(read(r[PC]++)) {
	case 0x00: return nop();
	case 0x01: return ld_rr_nn<BC>();
	case 0x02: return ld_rr_a<BC>();
	case 0x03: return inc_rr<BC>();
	case 0x04: return inc_r<B>();
	case 0x05: return dec_r<B>();
	case 0x06: return ld_r_n<B>();
	case 0x07: return rlca();
	case 0x08: return ld_mm_sp();
	case 0x09: return add_hl_rr<BC>();
	case 0x0A: return ld_a_rr<BC>();
	case 0x0B: return dec_rr<BC>();
	case 0x0C: return inc_r<C>();
	case 0x0D: return dec_r<C>();
	case 0x0E: return ld_r_n<C>();
	case 0x0F: return rrca();
	case 0x10: return stop();
	case 0x11: return ld_rr_nn<DE>();
	case 0x12: return ld_rr_a<DE>();
	case 0x13: return inc_rr<DE>();
	case 0x14: return inc_r<D>();
	case 0x15: return dec_r<D>();
	case 0x16: return ld_r_n<D>();
	case 0x17: return rla();
	case 0x18: return jr_n();
	case 0x19: return add_hl_rr<DE>();
	case 0x1A: return ld_a_rr<DE>();
	case 0x1B: return dec_rr<DE>();
	case 0x1C: return inc_r<E>();
	case 0x1D: return dec_r<E>();
	case 0x1E: return ld_r_n<E>();
	case 0x1F: return rra();
	case 0x20: return jr_cc_n<ZF, false>();
	case 0x21: return ld_rr_nn<HL>();
	case 0x22: return ldi_hl_a();
	case 0x23: return inc_rr<HL>();
	case 0x24: return inc_r<H>();
	case 0x25: return dec_r<H>();
	case 0x26: return ld_r_n<H>();
	case 0x27: return daa();
	case 0x28: return jr_cc_n<ZF, true>();
	case 0x29: return add_hl_rr<HL>();
	case 0x2A: return ldi_a_hl();
	case 0x2B: return dec_rr<HL>();
	case 0x2C: return inc_r<L>();
	case 0x2D: return dec_r<L>();
	case 0x2E: return ld_r_n<L>();
	case 0x2F: return cpl();
	case 0x30: return jr_cc_n<CF, false>();
	case 0x31: return ld_rr_nn<SP>();
	case 0x32: return ldd_hl_a();
	case 0x33: return inc_rr<SP>();
	case 0x34: return inc_hl();
	case 0x35: return dec_hl();
	case 0x36: return ld_hl_n();
	case 0x37: return scf();
	case 0x38: return jr_cc_n<CF, true>();
	case 0x39: return add_hl_rr<SP>();
	case 0x3A: return ldd_a_hl();
	case 0x3B: return dec_rr<SP>();
	case 0x3C: return inc_r<A>();
	case 0x3D: return dec_r<A>();
	case 0x3E: return ld_a_n();
	case 0x3F: return ccf();
	case 0x40: return ld_r_r<B, B>();
	case 0x41: return ld_r_r<B, C>();
	case 0x42: return ld_r_r<B, D>();
	case 0x43: return ld_r_r<B, E>();
	case 0x44: return ld_r_r<B, H>();
	case 0x45: return ld_r_r<B, L>();
	case 0x46: return ld_r_hl<B>();
	case 0x47: return ld_r_r<B, A>();
	case 0x48: return ld_r_r<C, B>();
	case 0x49: return ld_r_r<C, C>();
	case 0x4A: return ld_r_r<C, D>();
	case 0x4B: return ld_r_r<C, E>();
	case 0x4C: return ld_r_r<C, H>();
	case 0x4D: return ld_r_r<C, L>();
	case 0x4E: return ld_r_hl<C>();
	case 0x4F: return ld_r_r<C, A>();
	case 0x50: return ld_r_r<D, B>();
	case 0x51: return ld_r_r<D, C>();
	case 0x52: return ld_r_r<D, D>();
	case 0x53: return ld_r_r<D, E>();
	case 0x54: return ld_r_r<D, H>();
	case 0x55: return ld_r_r<D, L>();
	case 0x56: return ld_r_hl<D>();
	case 0x57: return ld_r_r<D, A>();
	case 0x58: return ld_r_r<E, B>();
	case 0x59: return ld_r_r<E, C>();
	case 0x5A: return ld_r_r<E, D>();
	case 0x5B: return ld_r_r<E, E>();
	case 0x5C: return ld_r_r<E, H>();
	case 0x5D: return ld_r_r<E, L>();
	case 0x5E: return ld_r_hl<E>();
	case 0x5F: return ld_r_r<E, A>();
	case 0x60: return ld_r_r<H, B>();
	case 0x61: return ld_r_r<H, C>();
	case 0x62: return ld_r_r<H, D>();
	case 0x63: return ld_r_r<H, E>();
	case 0x64: return ld_r_r<H, H>();
	case 0x65: return ld_r_r<H, L>();
	case 0x66: return ld_r_hl<H>();
	case 0x67: return ld_r_r<H, A>();
	case 0x68: return ld_r_r<L, B>();
	case 0x69: return ld_r_r<L, C>();
	case 0x6A: return ld_r_r<L, D>();
	case 0x6B: return ld_r_r<L, E>();
	case 0x6C: return ld_r_r<L, H>();
	case 0x6D: return ld_r_r<L, L>();
	case 0x6E: return ld_r_hl<L>();
	case 0x6F: return ld_r_r<L, A>();
	case 0x70: return ld_hl_r<B>();
	case 0x71: return ld_hl_r<C>();
	case 0x72: return ld_hl_r<D>();
	case 0x73: return ld_hl_r<E>();
	case 0x74: return ld_hl_r<H>();
	case 0x75: return ld_hl_r<L>();
	case 0x76: return halt();
	case 0x77: return ld_hl_r<A>();
	case 0x78: return ld_r_r<A, B>();
	case 0x79: return ld_r_r<A, C>();
	case 0x7A: return ld_r_r<A, D>();
	case 0x7B: return ld_r_r<A, E>();
	case 0x7C: return ld_r_r<A, H>();
	case 0x7D: return ld_r_r<A, L>();
	case 0x7E: return ld_r_hl<A>();
	case 0x7F: return nop();
	case 0x80: return add_a_r<B>();
	case 0x81: return add_a_r<C>();
	case 0x82: return add_a_r<D>();
	case 0x83: return add_a_r<E>();
	case 0x84: return add_a_r<H>();
	case 0x85: return add_a_r<L>();
	case 0x86: return add_a_hl();
	case 0x87: return add_a_r<A>();
	case 0x88: return adc_a_r<B>();
	case 0x89: return adc_a_r<C>();
	case 0x8A: return adc_a_r<D>();
	case 0x8B: return adc_a_r<E>();
	case 0x8C: return adc_a_r<H>();
	case 0x8D: return adc_a_r<L>();
	case 0x8E: return adc_a_hl();
	case 0x8F: return adc_a_r<A>();
	case 0x90: return sub_a_r<B>();
	case 0x91: return sub_a_r<C>();
	case 0x92: return sub_a_r<D>();
	case 0x93: return sub_a_r<E>();
	case 0x94: return sub_a_r<H>();
	case 0x95: return sub_a_r<L>();
	case 0x96: return sub_a_hl();
	case 0x97: return sub_a_r<A>();
	case 0x98: return sbc_a_r<B>();
	case 0x99: return sbc_a_r<C>();
	case 0x9A: return sbc_a_r<D>();
	case 0x9B: return sbc_a_r<E>();
	case 0x9C: return sbc_a_r<H>();
	case 0x9D: return sbc_a_r<L>();
	case 0x9E: return sbc_a_hl();
	case 0x9F: return sbc_a_r<A>();
	case 0xA0: return and_a_r<B>();
	case 0xA1: return and_a_r<C>();
	case 0xA2: return and_a_r<D>();
	case 0xA3: return and_a_r<E>();
	case 0xA4: return and_a_r<H>();
	case 0xA5: return and_a_r<L>();
	case 0xA6: return and_a_hl();
	case 0xA7: return and_a_r<A>();
	case 0xA8: return xor_a_r<B>();
	case 0xA9: return xor_a_r<C>();
	case 0xAA: return xor_a_r<D>();
	case 0xAB: return xor_a_r<E>();
	case 0xAC: return xor_a_r<H>();
	case 0xAD: return xor_a_r<L>();
	case 0xAE: return xor_a_hl();
	case 0xAF: return xor_a_r<A>();
	case 0xB0: return or_a_r<B>();
	case 0xB1: return or_a_r<C>();
	case 0xB2: return or_a_r<D>();
	case 0xB3: return or_a_r<E>();
	case 0xB4: return or_a_r<H>();
	case 0xB5: return or_a_r<L>();
	case 0xB6: return or_a_hl();
	case 0xB7: return or_a_r<A>();
	case 0xB8: return cp_a_r<B>();
	case 0xB9: return cp_a_r<C>();
	case 0xBA: return cp_a_r<D>();
	case 0xBB: return cp_a_r<E>();
	case 0xBC: return cp_a_r<H>();
	case 0xBD: return cp_a_r<L>();
	case 0xBE: return cp_a_hl();
	case 0xBF: return cp_a_r<A>();
	case 0xC0: return ret_cc<ZF, false>();
	case 0xC1: return pop_rr<BC>();
	case 0xC2: return jp_cc_nn<ZF, false>();
	case 0xC3: return jp_nn();
	case 0xC4: return call_cc_nn<ZF, false>();
	case 0xC5: return push_rr<BC>();
	case 0xC6: return add_a_n();
	case 0xC7: return rst_n<0x00>();
	case 0xC8: return ret_cc<ZF, true>();
	case 0xC9: return ret();
	case 0xCA: return jp_cc_nn<ZF, true>();
	case 0xCB: return instructionCB();
	case 0xCC: return call_cc_nn<ZF, true>();
	case 0xCD: return call_nn();
	case 0xCE: return adc_a_n();
	case 0xCF: return rst_n<0x08>();
	case 0xD0: return ret_cc<CF, false>();
	case 0xD1: return pop_rr<DE>();
	case 0xD2: return jp_cc_nn<CF, false>();
	case 0xD3: return unimpl_op();
	case 0xD4: return call_cc_nn<CF, false>();
	case 0xD5: return push_rr<DE>();
	case 0xD6: return sub_a_n();
	case 0xD7: return rst_n<0x10>();
	case 0xD8: return ret_cc<CF, true>();
	case 0xD9: return reti();
	case 0xDA: return jp_cc_nn<CF, true>();
	case 0xDB: return unimpl_op();
	case 0xDC: return call_cc_nn<CF, true>();
	case 0xDD: return unimpl_op();
	case 0xDE: return sbc_a_n();
	case 0xDF: return rst_n<0x18>();
	case 0xE0: return ldh_n_a();
	case 0xE1: return pop_rr<HL>();
	case 0xE2: return ld_c_a();
	case 0xE3: return unimpl_op();
	case 0xE4: return unimpl_op();
	case 0xE5: return push_rr<HL>();
	case 0xE6: return and_a_n();
	case 0xE7: return rst_n<0x20>();
	case 0xE8: return add_sp_n();
	case 0xE9: return jp_hl();
	case 0xEA: return ld_mm_a();
	case 0xEB: return unimpl_op();
	case 0xEC: return unimpl_op();
	case 0xED: return unimpl_op();
	case 0xEE: return xor_a_n();
	case 0xEF: return rst_n<0x28>();
	case 0xF0: return ldh_a_n();
	case 0xF1: return pop_rr<AF>();
	case 0xF2: return ld_a_c();
	case 0xF3: return di();
	case 0xF4: return unimpl_op();
	case 0xF5: return push_rr<AF>();
	case 0xF6: return or_a_n();
	case 0xF7: return rst_n<0x30>();
	case 0xF8: return ld_hl_sp_n();
	case 0xF9: return ld_sp_hl();
	case 0xFA: return ld_a_mm();
	case 0xFB: return ei();
	case 0xFC: return unimpl_op();
	case 0xFD: return unimpl_op();
	case 0xFE: return cp_a_n();
	case 0xFF: return rst_n<0x38>();
	}
}

void CPU::instructionCB() {
	switch(read(r[PC]++)) {
	case 0x00: return rlc_r<B>();
	case 0x01: return rlc_r<C>();
	case 0x02: return rlc_r<D>();
	case 0x03: return rlc_r<E>();
	case 0x04: return rlc_r<H>();
	case 0x05: return rlc_r<L>();
	case 0x06: return rlc_hl();
	case 0x07: return rlc_r<A>();
	case 0x08: return rrc_r<B>();
	case 0x09: return rrc_r<C>();
	case 0x0A: return rrc_r<D>();
	case 0x0B: return rrc_r<E>();
	case 0x0C: return rrc_r<H>();
	case 0x0D: return rrc_r<L>();
	case 0x0E: return rrc_hl();
	case 0x0F: return rrc_r<A>();
	case 0x10: return rl_r<B>();
	case 0x11: return rl_r<C>();
	case 0x12: return rl_r<D>();
	case 0x13: return rl_r<E>();
	case 0x14: return rl_r<H>();
	case 0x15: return rl_r<L>();
	case 0x16: return rl_hl();
	case 0x17: return rl_r<A>();
	case 0x18: return rr_r<B>();
	case 0x19: return rr_r<C>();
	case 0x1A: return rr_r<D>();
	case 0x1B: return rr_r<E>();
	case 0x1C: return rr_r<H>();
	case 0x1D: return rr_r<L>();
	case 0x1E: return rr_hl();
	case 0x1F: return rr_r<A>();
	case 0x20: return sla_r<B>();
	case 0x21: return sla_r<C>();
	case 0x22: return sla_r<D>();
	case 0x23: return sla_r<E>();
	case 0x24: return sla_r<H>();
	case 0x25: return sla_r<L>();
	case 0x26: return sla_hl();
	case 0x27: return sla_r<A>();
	case 0x28: return sra_r<B>();
	case 0x29: return sra_r<C>();
	case 0x2A: return sra_r<D>();
	case 0x2B: return sra_r<E>();
	case 0x2C: return sra_r<H>();
	case 0x2D: return sra_r<L>();
	case 0x2E: return sra_hl();
	case 0x2F: return sra_r<A>();
	case 0x30: return swap_r<B>();
	case 0x31: return swap_r<C>();
	case 0x32: return swap_r<D>();
	case 0x33: return swap_r<E>();
	case 0x34: return swap_r<H>();
	case 0x35: return swap_r<L>();
	case 0x36: return swap_hl();
	case 0x37: return swap_r<A>();
	case 0x38: return srl_r<B>();
	case 0x39: return srl_r<C>();
	case 0x3A: return srl_r<D>();
	case 0x3B: return srl_r<E>();
	case 0x3C: return srl_r<H>();
	case 0x3D: return srl_r<L>();
	case 0x3E: return srl_hl();
	case 0x3F: return srl_r<A>();
	case 0x40: return bit_b_r<0, B>();
	case 0x41: return bit_b_r<0, C>();
	case 0x42: return bit_b_r<0, D>();
	case 0x43: return bit_b_r<0, E>();
	case 0x44: return bit_b_r<0, H>();
	case 0x45: return bit_b_r<0, L>();
	case 0x46: return bit_b_hl<0>();
	case 0x47: return bit_b_r<0, A>();
	case 0x48: return bit_b_r<1, B>();
	case 0x49: return bit_b_r<1, C>();
	case 0x4A: return bit_b_r<1, D>();
	case 0x4B: return bit_b_r<1, E>();
	case 0x4C: return bit_b_r<1, H>();
	case 0x4D: return bit_b_r<1, L>();
	case 0x4E: return bit_b_hl<1>();
	case 0x4F: return bit_b_r<1, A>();
	case 0x50: return bit_b_r<2, B>();
	case 0x51: return bit_b_r<2, C>();
	case 0x52: return bit_b_r<2, D>();
	case 0x53: return bit_b_r<2, E>();
	case 0x54: return bit_b_r<2, H>();
	case 0x55: return bit_b_r<2, L>();
	case 0x56: return bit_b_hl<2>();
	case 0x57: return bit_b_r<2, A>();
	case 0x58: return bit_b_r<3, B>();
	case 0x59: return bit_b_r<3, C>();
	case 0x5A: return bit_b_r<3, D>();
	case 0x5B: return bit_b_r<3, E>();
	case 0x5C: return bit_b_r<3, H>();
	case 0x5D: return bit_b_r<3, L>();
	case 0x5E: return bit_b_hl<3>();
	case 0x5F: return bit_b_r<3, A>();
	case 0x60: return bit_b_r<4, B>();
	case 0x61: return bit_b_r<4, C>();
	case 0x62: return bit_b_r<4, D>();
	case 0x63: return bit_b_r<4, E>();
	case 0x64: return bit_b_r<4, H>();
	case 0x65: return bit_b_r<4, L>();
	case 0x66: return bit_b_hl<4>();
	case 0x67: return bit_b_r<4, A>();
	case 0x68: return bit_b_r<5, B>();
	case 0x69: return bit_b_r<5, C>();
	case 0x6A: return bit_b_r<5, D>();
	case 0x6B: return bit_b_r<5, E>();
	case 0x6C: return bit_b_r<5, H>();
	case 0x6D: return bit_b_r<5, L>();
	case 0x6E: return bit_b_hl<5>();
	case 0x6F: return bit_b_r<5, A>();
	case 0x70: return bit_b_r<6, B>();
	case 0x71: return bit_b_r<6, C>();
	case 0x72: return bit_b_r<6, D>();
	case 0x73: return bit_b_r<6, E>();
	case 0x74: return bit_b_r<6, H>();
	case 0x75: return bit_b_r<6, L>();
	case 0x76: return bit_b_hl<6>();
	case 0x77: return bit_b_r<6, A>();
	case 0x78: return bit_b_r<7, B>();
	case 0x79: return bit_b_r<7, C>();
	case 0x7A: return bit_b_r<7, D>();
	case 0x7B: return bit_b_r<7, E>();
	case 0x7C: return bit_b_r<7, H>();
	case 0x7D: return bit_b_r<7, L>();
	case 0x7E: return bit_b_hl<7>();
	case 0x7F: return bit_b_r<7, A>();
	case 0x80: return res_b_r<0, B>();
	case 0x81: return res_b_r<0, C>();
	case 0x82: return res_b_r<0, D>();
	case 0x83: return res_b_r<0, E>();
	case 0x84: return res_b_r<0, H>();
	case 0x85: return res_b_r<0, L>();
	case 0x86: return res_b_hl<0>();
	case 0x87: return res_b_r<0, A>();
	case 0x88: return res_b_r<1, B>();
	case 0x89: return res_b_r<1, C>();
	case 0x8A: return res_b_r<1, D>();
	case 0x8B: return res_b_r<1, E>();
	case 0x8C: return res_b_r<1, H>();
	case 0x8D: return res_b_r<1, L>();
	case 0x8E: return res_b_hl<1>();
	case 0x8F: return res_b_r<1, A>();
	case 0x90: return res_b_r<2, B>();
	case 0x91: return res_b_r<2, C>();
	case 0x92: return res_b_r<2, D>();
	case 0x93: return res_b_r<2, E>();
	case 0x94: return res_b_r<2, H>();
	case 0x95: return res_b_r<2, L>();
	case 0x96: return res_b_hl<2>();
	case 0x97: return res_b_r<2, A>();
	case 0x98: return res_b_r<3, B>();
	case 0x99: return res_b_r<3, C>();
	case 0x9A: return res_b_r<3, D>();
	case 0x9B: return res_b_r<3, E>();
	case 0x9C: return res_b_r<3, H>();
	case 0x9D: return res_b_r<3, L>();
	case 0x9E: return res_b_hl<3>();
	case 0x9F: return res_b_r<3, A>();
	case 0xA0: return res_b_r<4, B>();
	case 0xA1: return res_b_r<4, C>();
	case 0xA2: return res_b_r<4, D>();
	case 0xA3: return res_b_r<4, E>();
	case 0xA4: return res_b_r<4, H>();
	case 0xA5: return res_b_r<4, L>();
	case 0xA6: return res_b_hl<4>();
	case 0xA7: return res_b_r<4, A>();
	case 0xA8: return res_b_r<5, B>();
	case 0xA9: return res_b_r<5, C>();
	case 0xAA: return res_b_r<5, D>();
	case 0xAB: return res_b_r<5, E>();
	case 0xAC: return res_b_r<5, H>();
	case 0xAD: return res_b_r<5, L>();
	case 0xAE: return res_b_hl<5>();
	case 0xAF: return res_b_r<5, A>();
	case 0xB0: return res_b_r<6, B>();
	case 0xB1: return res_b_r<6, C>();
	case 0xB2: return res_b_r<6, D>();
	case 0xB3: return res_b_r<6, E>();
	case 0xB4: return res_b_r<6, H>();
	case 0xB5: return res_b_r<6, L>();
	case 0xB6: return res_b_hl<6>();
	case 0xB7: return res_b_r<6, A>();
	case 0xB8: return res_b_r<7, B>();
	case 0xB9: return res_b_r<7, C>();
	case 0xBA: return res_b_r<7, D>();
	case 0xBB: return res_b_r<7, E>();
	case 0xBC: return res_b_r<7, H>();
	case 0xBD: return res_b_r<7, L>();
	case 0xBE: return res_b_hl<7>();
	case 0xBF: return res_b_r<7, A>();
	case 0xC0: return set_b_r<0, B>();
	case 0xC1: return set_b_r<0, C>();
	case 0xC2: return set_b_r<0, D>();
	case 0xC3: return set_b_r<0, E>();
	case 0xC4: return set_b_r<0, H>();
	case 0xC5: return set_b_r<0, L>();
	case 0xC6: return set_b_hl<0>();
	case 0xC7: return set_b_r<0, A>();
	case 0xC8: return set_b_r<1, B>();
	case 0xC9: return set_b_r<1, C>();
	case 0xCA: return set_b_r<1, D>();
	case 0xCB: return set_b_r<1, E>();
	case 0xCC: return set_b_r<1, H>();
	case 0xCD: return set_b_r<1, L>();
	case 0xCE: return set_b_hl<1>();
	case 0xCF: return set_b_r<1, A>();
	case 0xD0: return set_b_r<2, B>();
	case 0xD1: return set_b_r<2, C>();
	case 0xD2: return set_b_r<2, D>();
	case 0xD3: return set_b_r<2, E>();
	case 0xD4: return set_b_r<2, H>();
	case 0xD5: return set_b_r<2, L>();
	case 0xD6: return set_b_hl<2>();
	case 0xD7: return set_b_r<2, A>();
	case 0xD8: return set_b_r<3, B>();
	case 0xD9: return set_b_r<3, C>();
	case 0xDA: return set_b_r<3, D>();
	case 0xDB: return set_b_r<3, E>();
	case 0xDC: return set_b_r<3, H>();
	case 0xDD: return set_b_r<3, L>();
	case 0xDE: return set_b_hl<3>();
	case 0xDF: return set_b_r<3, A>();
	case 0xE0: return set_b_r<4, B>();
	case 0xE1: return set_b_r<4, C>();
	case 0xE2: return set_b_r<4, D>();
	case 0xE3: return set_b_r<4, E>();
	case 0xE4: return set_b_r<4, H>();
	case 0xE5: return set_b_r<4, L>();
	case 0xE6: return set_b_hl<4>();
	case 0xE7: return set_b_r<4, A>();
	case 0xE8: return set_b_r<5, B>();
	case 0xE9: return set_b_r<5, C>();
	case 0xEA: return set_b_r<5, D>();
	case 0xEB: return set_b_r<5, E>();
	case 0xEC: return set_b_r<5, H>();
	case 0xED: return set_b_r<5, L>();
	case 0xEE: return set_b_hl<5>();
	case 0xEF: return set_b_r<5, A>();
	case 0xF0: return set_b_r<6, B>();
	case 0xF1: return set_b_r<6, C>();
	case 0xF2: return set_b_r<6, D>();
	case 0xF3: return set_b_r<6, E>();
	case 0xF4: return set_b_r<6, H>();
	case 0xF5: return set_b_r<6, L>();
	case 0xF6: return set_b_hl<6>();
	case 0xF7: return set_b_r<6, A>();
	case 0xF8: return set_b_r<7, B>();
	case 0xF9: return set_b_r<7, C>();
	case 0xFA: return set_b_r<7, D>();
	case 0xFB: return set_b_r<7, E>();
	case 0xFC: return set_b_r<7, H>();
	case 0xFD: return set_b_r<7, L>();
	case 0xFE: return set_b_hl<7>();
	case 0xFF: return set_b_r<7, A>();
	}
}
}
